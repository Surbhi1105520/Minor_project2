{"name": "test_menu_item_not_present", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nfrom unknown command: 'Runtime.evaluate' wasn't found\n  (Session info: chrome=139.0.7258.155)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7e7f73d85+79397]\n\tGetHandleVerifier [0x0x7ff7e7f73de0+79488]\n\t(No symbol) [0x0x7ff7e7d1c0fa]\n\t(No symbol) [0x0x7ff7e7d08d60]\n\t(No symbol) [0x0x7ff7e7d0747c]\n\t(No symbol) [0x0x7ff7e7d07d2f]\n\t(No symbol) [0x0x7ff7e7d32fab]\n\t(No symbol) [0x0x7ff7e7d265d0]\n\t(No symbol) [0x0x7ff7e7d26472]\n\t(No symbol) [0x0x7ff7e7cf8242]\n\t(No symbol) [0x0x7ff7e7cf6233]\n\t(No symbol) [0x0x7ff7e7ddb581]\n\t(No symbol) [0x0x7ff7e7d9b19a]\n\t(No symbol) [0x0x7ff7e7dc3344]\n\t(No symbol) [0x0x7ff7e7d9af73]\n\t(No symbol) [0x0x7ff7e7d641b1]\n\t(No symbol) [0x0x7ff7e7d64f43]\n\tGetHandleVerifier [0x0x7ff7e823e1ed+3005069]\n\tGetHandleVerifier [0x0x7ff7e823831d+2980797]\n\tGetHandleVerifier [0x0x7ff7e8257e0d+3110573]\n\tGetHandleVerifier [0x0x7ff7e7f8d6de+184190]\n\tGetHandleVerifier [0x0x7ff7e7f9516f+215567]\n\tGetHandleVerifier [0x0x7ff7e7f7c974+115220]\n\tGetHandleVerifier [0x0x7ff7e7f7cb29+115657]\n\tGetHandleVerifier [0x0x7ff7e7f63268+11016]\n\tBaseThreadInitThunk [0x0x7ffa732fe8d7+23]\n\tRtlUserThreadStart [0x0x7ffa74a9c34c+44]", "trace": "@pytest.fixture\n    def driver():\n        driver = webdriver.Chrome(service=Service())\n>       driver.maximize_window()\n\ntests\\conftest.py:106: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python-3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:536: in maximize_window\n    self.execute(command, None)\nC:\\python-3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001BA203184F0>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: JavaScript code failed\\\\nfrom un...ff7e7f63268+11016]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffa732fe8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffa74a9c34c+44]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: JavaScript code failed\nE       from unknown command: 'Runtime.evaluate' wasn't found\nE         (Session info: chrome=139.0.7258.155)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7e7f73d85+79397]\nE       \tGetHandleVerifier [0x0x7ff7e7f73de0+79488]\nE       \t(No symbol) [0x0x7ff7e7d1c0fa]\nE       \t(No symbol) [0x0x7ff7e7d08d60]\nE       \t(No symbol) [0x0x7ff7e7d0747c]\nE       \t(No symbol) [0x0x7ff7e7d07d2f]\nE       \t(No symbol) [0x0x7ff7e7d32fab]\nE       \t(No symbol) [0x0x7ff7e7d265d0]\nE       \t(No symbol) [0x0x7ff7e7d26472]\nE       \t(No symbol) [0x0x7ff7e7cf8242]\nE       \t(No symbol) [0x0x7ff7e7cf6233]\nE       \t(No symbol) [0x0x7ff7e7ddb581]\nE       \t(No symbol) [0x0x7ff7e7d9b19a]\nE       \t(No symbol) [0x0x7ff7e7dc3344]\nE       \t(No symbol) [0x0x7ff7e7d9af73]\nE       \t(No symbol) [0x0x7ff7e7d641b1]\nE       \t(No symbol) [0x0x7ff7e7d64f43]\nE       \tGetHandleVerifier [0x0x7ff7e823e1ed+3005069]\nE       \tGetHandleVerifier [0x0x7ff7e823831d+2980797]\nE       \tGetHandleVerifier [0x0x7ff7e8257e0d+3110573]\nE       \tGetHandleVerifier [0x0x7ff7e7f8d6de+184190]\nE       \tGetHandleVerifier [0x0x7ff7e7f9516f+215567]\nE       \tGetHandleVerifier [0x0x7ff7e7f7c974+115220]\nE       \tGetHandleVerifier [0x0x7ff7e7f7cb29+115657]\nE       \tGetHandleVerifier [0x0x7ff7e7f63268+11016]\nE       \tBaseThreadInitThunk [0x0x7ffa732fe8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffa74a9c34c+44]\n\nC:\\python-3.8\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: WebDriverException"}, "description": "\n    Negative test:\n    Ensure a bogus menu item is NOT visible/clickable.\n    ", "start": 1757106533501, "stop": 1757106533501, "uuid": "40f3f15b-be9d-4b4e-b638-0421c5e431a9", "historyId": "36d27b9b1360ec19f3258f0ada294814", "testCaseId": "36d27b9b1360ec19f3258f0ada294814", "fullName": "tests.test_4dash#test_menu_item_not_present", "labels": [{"name": "tag", "value": "negative"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_4dash"}, {"name": "host", "value": "aq"}, {"name": "thread", "value": "27456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_4dash"}], "titlePath": ["tests", "test_4dash.py"]}